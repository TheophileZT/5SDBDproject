name: docker-ci

on:
  push:
    branches:
      - FutureDataService
    paths:
      - 'Inference/**'
      - 'Frontend/**'
      - 'StationService/**'
      - 'EventImpactScoringSystem/**'
      - 'FetchFutureDataService/**'
      - '.github/workflows/docker-ci.yml'
      - 'docker-compose.yml'
  pull_request:
    branches:
      - FutureDataService
      
permissions: read-all

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      inference_changed: ${{ steps.determine-changes.outputs.inference }}
      frontend_changed: ${{ steps.determine-changes.outputs.frontend }}
      stationservice_changed: ${{ steps.determine-changes.outputs.stationservice }}
      eventimpactscoringsystem_changed: ${{ steps.determine-changes.outputs.eventimpactscoringsystem }}
      fetchfuturedataservice_changed: ${{ steps.determine-changes.outputs.fetchfuturedataservice }}
      docker_compose_changed: ${{ steps.determine-changes.outputs.docker_compose }}
      ci_workflow_updated: ${{ steps.determine-changes.outputs.ci_workflow }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Fetch the previous commit

      - name: Determine changed directories
        id: determine-changes
        run: |
          changed_dirs=$(git diff --name-only HEAD~1 HEAD | xargs -I {} dirname {} | sort | uniq)
          echo "Changed directories: $changed_dirs"

          # Initialize all the variables corresponding to the branches that have been updated
          echo "inference_changed=false" >> $GITHUB_ENV
          echo "frontend_changed=false" >> $GITHUB_ENV
          echo "stationservice_changed=false" >> $GITHUB_ENV
          echo "eventimpactscoringsystem_changed=false" >> $GITHUB_ENV
          echo "fetchfuturedataservice_changed=false" >> $GITHUB_ENV
          echo "docker_compose_changed=false" >> $GITHUB_ENV
          echo "ci_workflow_updated=false" >> $GITHUB_ENV
          for dir in $changed_dirs; do
            if [ "$dir" == "Inference" ]; then
              echo "inference_changed=true" >> $GITHUB_ENV
            elif [ "$dir" == "Frontend" ]; then
              echo "frontend_changed=true" >> $GITHUB_ENV
            elif [ "$dir" == "StationService" ]; then
              echo "stationservice_changed=true" >> $GITHUB_ENV
            elif [ "$dir" == "EventImpactScoringSystem" ]; then
              echo "eventimpactscoringsystem_changed=true" >> $GITHUB_ENV
            elif [ "$dir" == "FetchFutureDataService" ]; then
              echo "fetchfuturedataservice_changed=true" >> $GITHUB_ENV
            fi
          done

          # Special check for docker-compose.yml
          if git diff --name-only HEAD~1 HEAD | grep -q 'docker-compose.yml'; then
            echo "docker_compose_changed=true" >> $GITHUB_ENV
          fi
          if git diff --name-only HEAD~1 HEAD | grep -q '.github/workflows/docker-ci.yml'; then
            echo "ci_workflow_updated=true" >> $GITHUB_ENV
          fi

  build-and-deploy-inference:
    needs: check-changes
    if: needs.check-changes.outputs.inference  == 'true' && needs.check-changes.outputs.docker_compose  == 'false' && needs.check-changes.outputs.ci_workflow == 'false'
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
      - name: Build and push Docker images
        run: |
          docker compose build inference-service
          docker compose push inference-service
      - name: Deploy to VM
        run: |
          scp docker-compose.yml ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:~/5SDBDproject
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} '
            cd ~/5SDBDproject &&
            docker compose pull inference-service &&
            docker compose up -d --remove-orphans inference-service
          '

  build-and-deploy-frontend:
    needs: check-changes
    if: needs.check-changes.outputs.frontend  == 'true' && needs.check-changes.outputs.docker_compose  == 'false' && needs.check-changes.outputs.ci_workflow == 'false'
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
      - name: Build and push Docker images
        run: |
          docker compose build frontend-service
          docker compose push frontend-service
      - name: Deploy to VM
        run: |
          scp docker-compose.yml ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:~/5SDBDproject
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} '
            cd ~/5SDBDproject &&
            docker compose pull frontend-service &&
            docker compose up -d --remove-orphans frontend-service
          '

  build-and-deploy-stationservice:
    needs: check-changes
    if: needs.check-changes.outputs.stationservice  == 'true' && needs.check-changes.outputs.docker_compose  == 'false' && needs.check-changes.outputs.ci_workflow == 'false'
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
      - name: Build and push Docker images
        run: |
          docker compose build station-service
          docker compose push station-service
      - name: Deploy to VM
        run: |
          scp docker-compose.yml ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:~/5SDBDproject
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} '
            cd ~/5SDBDproject &&
            docker compose pull station-service &&
            docker compose up -d --remove-orphans station-service
          '

  build-and-deploy-eventimpactscoringsystem:
    needs: check-changes
    if: needs.check-changes.outputs.eventimpactscoringsystem  == 'true' && needs.check-changes.outputs.docker_compose  == 'false' && needs.check-changes.outputs.ci_workflow == 'false'
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
      - name: Build and push Docker images
        run: |
          docker compose build event-scoring-service
          docker compose push event-scoring-service
      - name: Deploy to VM
        run: |
          scp docker-compose.yml ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:~/5SDBDproject
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} '
            cd ~/5SDBDproject &&
            docker compose pull event-scoring-service &&
            docker compose up -d --remove-orphans event-scoring-service
          '

  build-and-deploy-fetchfuturedataservice:
    needs: check-changes
    if: needs.check-changes.outputs.fetchfuturedataservice_changed == 'true' && needs.check-changes.outputs.docker_compose  == 'false' && needs.check-changes.outputs.ci_workflow == 'false'
    runs-on: ubuntu-latest
  
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
      - name: Build and push Docker images
        run: |
          docker compose build fetch-future-data-service
          docker compose push fetch-future-data-service
      - name: Deploy to VM
        run: |
          scp docker-compose.yml ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:~/5SDBDproject
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} '
            cd ~/5SDBDproject &&
            docker compose pull fetch-future-data-service &&
            docker compose up -d --remove-orphans fetch-future-data-service
          '

  build-and-deploy-dockercompose:
    needs: check-changes
    if: needs.check-changes.outputs.docker_compose  == 'true' || needs.check-changes.outputs.workflow_updated == 'true'
    runs-on: ubuntu-latest
   
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Add VM to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
      - name: Build and push Docker images
        run: |
          docker compose build
          docker compose push
      - name: Deploy to VM
        run: |
          scp docker-compose.yml ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:~/5SDBDproject
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} '
            cd ~/5SDBDproject &&
            docker compose pull &&
            docker compose up -d --remove-orphans
          '
